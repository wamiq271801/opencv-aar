name: Build OpenCV AAR (arm64-v8a)
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
      - name: Install Java & Tools
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y openjdk-17-jdk unzip wget
      - name: Download OpenCV Android SDK
        run: |
          OPENCV_VERSION="4.12.0"
          wget -q -O opencv-android-sdk.zip https://github.com/opencv/opencv/releases/download/${OPENCV_VERSION}/opencv-${OPENCV_VERSION}-android-sdk.zip
          unzip -q opencv-android-sdk.zip
      - name: Prepare Gradle Project
        run: |
          mkdir -p OpenCV-AAR/opencv-lib
          
          cat > OpenCV-AAR/settings.gradle <<'EOF'
          rootProject.name = "OpenCV-AAR"
          include(":opencv-lib")
          EOF
          
          cat > OpenCV-AAR/build.gradle <<'EOF'
          buildscript {
              repositories { google(); mavenCentral() }
              dependencies { classpath "com.android.tools.build:gradle:8.2.2" }
          }
          allprojects {
              repositories { google(); mavenCentral() }
          }
          EOF
          
          cat > OpenCV-AAR/gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx4g
          android.useAndroidX=true
          android.enableJetifier=true
          EOF
          
          cat > OpenCV-AAR/opencv-lib/build.gradle <<'EOF'
          plugins { id 'com.android.library' }
          android {
              namespace "org.opencv"
              compileSdk 34
              defaultConfig {
                  minSdk 24
                  targetSdk 34
                  consumerProguardFiles "consumer-rules.pro"
                  ndk { abiFilters "arm64-v8a" }
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
                  }
              }
              sourceSets {
                  main {
                      java.srcDirs = ['src/main/java']
                      jniLibs.srcDirs = ['src/main/jniLibs']
                  }
              }
          }
          EOF
          
          touch OpenCV-AAR/opencv-lib/consumer-rules.pro
          touch OpenCV-AAR/opencv-lib/proguard-rules.pro
          mkdir -p OpenCV-AAR/opencv-lib/src/main/java
          mkdir -p OpenCV-AAR/opencv-lib/src/main/jniLibs/arm64-v8a
          
          # Auto-detect OpenCV SDK folder
          OPENCV_DIR=$(find . -maxdepth 1 -type d -name "*android-sdk*" | head -n 1)
          echo "Found OpenCV directory: $OPENCV_DIR"
          
          # List directory structure for debugging
          echo "OpenCV SDK structure:"
          find "$OPENCV_DIR" -type f -name "*.jar" | head -10
          
          # Copy Java source files
          if [ -d "$OPENCV_DIR/sdk/java/src" ]; then
              cp -r "$OPENCV_DIR/sdk/java/src/"* OpenCV-AAR/opencv-lib/src/main/java/
          else
              echo "Warning: Java source directory not found"
          fi
          
          # Copy native libraries
          if [ -d "$OPENCV_DIR/sdk/native/libs/arm64-v8a" ]; then
              cp -r "$OPENCV_DIR/sdk/native/libs/arm64-v8a/"* OpenCV-AAR/opencv-lib/src/main/jniLibs/arm64-v8a/
          else
              echo "Warning: Native libraries for arm64-v8a not found"
          fi
          
          # Try to find and copy JAR file from multiple possible locations
          JAR_FOUND=false
          for jar_path in \
              "$OPENCV_DIR/sdk/java/bin/opencv-*.jar" \
              "$OPENCV_DIR/sdk/java/opencv-*.jar" \
              "$OPENCV_DIR/sdk/java/build/outputs/jar/opencv-*.jar" \
              "$OPENCV_DIR/opencv-*.jar" \
              "$OPENCV_DIR/sdk/opencv-*.jar"; do
              if ls $jar_path 1> /dev/null 2>&1; then
                  mkdir -p OpenCV-AAR/opencv-lib/libs
                  cp $jar_path OpenCV-AAR/opencv-lib/libs/
                  echo "Found and copied JAR: $jar_path"
                  JAR_FOUND=true
                  break
              fi
          done
          
          if [ "$JAR_FOUND" = false ]; then
              echo "Warning: No OpenCV JAR file found, creating minimal build without JAR dependency"
              # Remove libs directory since we don't have a JAR
              rmdir OpenCV-AAR/opencv-lib/libs 2>/dev/null || true
          fi
          
      - name: Install Gradle
        run: |
          wget -q https://services.gradle.org/distributions/gradle-8.2.1-bin.zip
          unzip -q gradle-8.2.1-bin.zip -d /opt/gradle
          echo "/opt/gradle/gradle-8.2.1/bin" >> $GITHUB_PATH
          
      - name: Build AAR
        run: |
          cd OpenCV-AAR
          gradle :opencv-lib:assembleRelease --no-daemon
          
      - name: Commit & Push AAR to Repo
        run: |
          mkdir -p dist
          cp OpenCV-AAR/opencv-lib/build/outputs/aar/opencv-lib-release.aar dist/opencv-4.12.0-arm64-v8a.aar
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add dist/
          git commit -m "Add OpenCV 4.12.0 arm64-v8a AAR [skip ci]" || echo "No changes to commit"
          git push origin main
